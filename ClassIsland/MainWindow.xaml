<Window x:Class="ClassIsland.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClassIsland"
        mc:Ignorable="d"
        Title="ClassIsland" 
        Height="40" 
        Width="800"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:controls="clr-namespace:ClassIsland.Controls"
        xmlns:converters="clr-namespace:ClassIsland.Converters"
        xmlns:models="clr-namespace:ClassIsland.Models"
        xmlns:hc="https://handyorg.github.io/handycontrol"
        xmlns:tb="clr-namespace:H.NotifyIcon;assembly=H.NotifyIcon.Wpf"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        Background="{x:Null}"
        TextElement.FontWeight="Medium"
        TextElement.FontSize="14"
        d:DataContext="{d:DesignInstance local:MainWindow}"
        FontFamily="{StaticResource HarmonyOsSans}"
        ResizeMode="NoResize"
        MouseDown="MainWindow_OnPreviewMouseDown"
        ShowInTaskbar="False"
        WindowStyle="None"
        d:Width="600"
        Closing="MainWindow_OnClosing"
        SizeChanged="MainWindow_OnSizeChanged"
        AllowsTransparency="True"
        Activated="MainWindow_OnActivated"
        StateChanged="MainWindow_OnStateChanged"
        Icon="/Assets/AppLogo.ico">
    <Window.Resources>
        <converters:IndexConverter x:Key="IndexConverter" />
        <models:ClassPlan x:Key="FallbackClassPlan"/>

        <ContextMenu FontFamily="{StaticResource HarmonyOsSans}" x:Key="AppContextMenu">
            <MenuItem Click="MenuItemAbout_OnClick" IsEnabled="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay}">
                <MenuItem.Icon>
                    <Image Source="/Assets/AppLogo.ico"/>
                </MenuItem.Icon>
                <MenuItem.Header>
                    <TextBlock>
                        <Run Text="ClassIsland"/>
                    </TextBlock>
                </MenuItem.Header>
            </MenuItem>
            <MenuItem Header="更新可用…" Click="MenuItemUpdates_OnClick" IsEnabled="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay}">
                <MenuItem.Icon>
                    <materialDesign:PackIcon Kind="UploadOutline"/>
                </MenuItem.Icon>
                <MenuItem.Style>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ViewModel.Settings.LastUpdateStatus}" Value="UpToDate">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.Style>
            </MenuItem>
            <MenuItem Icon="{materialDesign:PackIcon HelpCircleOutline}" Header="帮助…" Click="MenuItemHelps_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Separator/>
            <MenuItem Icon="{materialDesign:PackIcon FileDocumentEditOutline}" Header="编辑档案…" Click="ButtonSettings_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon SettingsOutline}" Header="应用设置…" Click="MenuItemSettings_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon FileChartOutline}" Header="加载临时课表…" Click="MenuItemTemporaryClassPlan_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Separator Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon ExitToApp}"  Header="退出" Click="MenuItemExitApp_OnClick"/>
            <Separator Visibility="{Binding ViewModel.Settings.IsDebugEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon BugOutline}" Header="调试"
                      Visibility="{Binding ViewModel.Settings.IsDebugEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                <MenuItem Header="SizeToContentTest" Click="ButtonResizeDebug_OnClick"/>
                <Separator/>
                <MenuItem Header="OverlayMaskIn" Click="MenuItemDebugOverlayMaskIn_OnClick"/>
                <MenuItem Header="OverlayMaskOut" Click="MenuItemDebugOverlayMaskOut_OnClick"/>
                <MenuItem Header="OverlayOut" Click="MenuItemDebugOverlayOut_OnClick"/>
                <MenuItem Header="OverlayMaskOutDirect" Click="MenuItemDebugOverlayMaskOutDirect_OnClick"/>
                <Separator/>
                <MenuItem Header="WelcomeWindow" Click="MenuItemDebugWelcomeWindow_OnClick"/>
                <MenuItem Header="WelcomeWindow (Full)" Click="MenuItemDebugWelcomeWindow2_OnClick"/>
            </MenuItem>
        </ContextMenu>

        <!-- 准备上课 遮罩 -->
        <StackPanel Orientation="Horizontal" x:Key="ClassPrepareNotifyMask" 
                    VerticalAlignment="Center" HorizontalAlignment="Center">
            <materialDesign:PackIcon Kind="AlertCircleOutline" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
            <TextBlock Text="即将上课" FontSize="18" Margin="8 0"/>
            <materialDesign:PackIcon Kind="Class" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
        </StackPanel>
        <converters:TimeSpanToTotalSecondsConverter x:Key="TimeSpanToTotalSecondsConverter" />

        <!-- 准备上课 -->
        <Grid x:Key="ClassPrepareNotifyOverlay">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <!-- 倒计时 -->
            <TextBlock Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="16">
                <Run Text="距上课还剩"/>
                <Run Text="{Binding ViewModel.OnClassLeftTime, Converter={StaticResource TimeSpanToTotalSecondsConverter}, Mode=OneWay}" FontWeight="Bold"/>
                <Run Text="秒"/>
            </TextBlock>

            <!-- 科目信息 -->
            <StackPanel Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Horizontal"
                        TextElement.FontSize="16">
                <TextBlock VerticalAlignment="Center" Text="下节课是："/>
                <TextBlock Text="{Binding ViewModel.NextSubject.Name}" FontWeight="Bold" FontSize="20" VerticalAlignment="Center"/>
                <TextBlock Margin="6 0 0 0" FontSize="14" VerticalAlignment="Bottom">
                    <Run Text="{Binding ViewModel.NextTimeLayoutItem.StartSecond, ConverterCulture=zh-cn, StringFormat={}{0:HH:mm}}">
                    </Run><Run Text="-">
                    </Run><Run Text="{Binding ViewModel.NextTimeLayoutItem.EndSecond, ConverterCulture=zh-cn, StringFormat={}{0:HH:mm}}"/>
                </TextBlock>
            </StackPanel>
        </Grid>

        <!-- 上课遮罩 -->
        <StackPanel Orientation="Horizontal" x:Key="ClassOnNotification" 
                    VerticalAlignment="Center" HorizontalAlignment="Center">
            <materialDesign:PackIcon Kind="AlertCircleOutline" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
            <TextBlock Text="上课" FontSize="18" Margin="8 0" FontWeight="Bold"/>
            <materialDesign:PackIcon Kind="Class" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
        </StackPanel>

        <!-- 下课遮罩 -->
        <StackPanel Orientation="Horizontal" x:Key="ClassOffNotification" 
                    VerticalAlignment="Center" HorizontalAlignment="Center">
            <materialDesign:PackIcon Kind="AlertCircleOutline" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
            <TextBlock Text="课间休息" FontSize="18" Margin="8 0" FontWeight="Bold"/>
            <materialDesign:PackIcon Kind="Clock" VerticalAlignment="Center"
                                     Height="20" Width="20"/>
        </StackPanel>

        <!-- 下课提醒 -->
        <Grid x:Key="ClassOffOverlay">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <!-- 课间时间 -->
            <TextBlock Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="16">
                <Run Text="本节课间休息长"/>
                <Run Text="{Binding ViewModel.CurrentTimeLayoutItem.Last, ConverterCulture=zh-cn, Mode=OneWay}" FontWeight="Bold"/>
            </TextBlock>

            <!-- 科目信息 -->
            <StackPanel Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Horizontal"
                        TextElement.FontSize="16">
                <TextBlock VerticalAlignment="Center" Text="下节课是："/>
                <TextBlock Text="{Binding ViewModel.NextSubject.Name}" FontWeight="Bold" FontSize="20" VerticalAlignment="Center"/>
                <TextBlock Margin="6 0 0 0" FontSize="14" VerticalAlignment="Bottom">
                    <Run Text="{Binding ViewModel.NextTimeLayoutItem.StartSecond, ConverterCulture=zh-cn, StringFormat={}{0:HH:mm}}">
                    </Run><Run Text="-">
                    </Run><Run Text="{Binding ViewModel.NextTimeLayoutItem.EndSecond, ConverterCulture=zh-cn, StringFormat={}{0:HH:mm}}"/>
                </TextBlock>
            </StackPanel>
        </Grid>

        <!--#region StoryBoards-->
        <Storyboard x:Key="OverlayMaskIn">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="-60"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <PowerEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.7">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OverlayMaskOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OverlayOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.7"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OverlayMaskOutDirect">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00.0000000" Value="0.7"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="WindowMouseIn">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1500000" Value="0.1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="WindowMouseOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1500000" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <converters:IntToStringConverter x:Key="IntToStringConverter" />
        <!--#endregion 1-->
    </Window.Resources>
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <!-- 鼠标移入 -->
                <DataTrigger Binding="{Binding ViewModel.IsMouseIn}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource WindowMouseIn}" Name="WindowMouseIn"/>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource WindowMouseOut}" Name="WindowMouseOut"/>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
            <!-- 默认状态 -->
            <Setter Property="Topmost" Value="False"/>
        </Style>
    </Window.Style>
    <Canvas>
        <!-- ROOT -->
        <Grid ContextMenu="{StaticResource AppContextMenu}"
              ClipToBounds="True"
              Canvas.Left="0"
              Canvas.Top="0"
              IsHitTestVisible="{Binding ViewModel.Settings.IsMouseClickingEnabled, Mode=OneWay}"
              VerticalAlignment="Top"
              HorizontalAlignment="Center"
              SizeChanged="GridRoot_OnSizeChanged"
              x:Name="GridRoot"
              RenderTransformOrigin="0,0">
            <Grid.RenderTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="{Binding ViewModel.Settings.Scale, Mode=OneWay}"
                                    ScaleY="{Binding ViewModel.Settings.Scale, Mode=OneWay}" />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                </TransformGroup>
            </Grid.RenderTransform>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>

                        <!-- 窗口上课隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideOnClass, Mode=OneWay}" Value="True" />
                                <Condition Binding="{Binding ViewModel.CurrentStatus, Mode=OneWay}" Value="OnClass" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!-- 窗口最大化隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideOnMaxWindow, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsForegroundMaxWindow, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!-- 窗口全屏隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideOnFullscreen, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsForegroundFullscreen, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </Style.Triggers>

                    <Setter Property="Visibility" Value="Visible" />
                </Style>
            </Grid.Style>
            <Grid.Effect>
                <DropShadowEffect BlurRadius="8" Direction="0" 
                                  ShadowDepth="0" Opacity="0"
                                  x:Name="RootDropShadowEffect"
                                  Color="Black"/>
            </Grid.Effect>
            <Grid x:Name="GridWrapper" ClipToBounds="True"
                  HorizontalAlignment="Center">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="0">
                                <Setter Property="Margin" Value="0 0 8 8"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="1">
                                <Setter Property="Margin" Value="8 0 8 8"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="2">
                                <Setter Property="Margin" Value="8 0 0 8"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="3">
                                <Setter Property="Margin" Value="0 8 8 0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="4">
                                <Setter Property="Margin" Value="8 8 8 0"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}" Value="5">
                                <Setter Property="Margin" Value="8 8 0 0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <!-- Background -->
                <Border HorizontalAlignment="Stretch"
                        Background="{DynamicResource MaterialDesignPaper}"
                        Opacity="{Binding ViewModel.Settings.Opacity, Mode=OneWay}" />

                <Canvas HorizontalAlignment="Left" 
                        Height="40"
                        Margin="16 0">
                </Canvas>
                <Grid Height="40"
                      Margin="16 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <!-- 日历 -->
                        <StackPanel Grid.Column="0" Orientation="Horizontal"
                            Margin="6 0 12 0"
                            VerticalAlignment="Center"
                            Visibility="{Binding ViewModel.Settings.ShowDate, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                            <TextBlock FontSize="16"
                                Text="{Binding ViewModel.Today, ConverterCulture=zh-cn, StringFormat=\{0:ddd MM/dd\}}" />
                        </StackPanel>

                        <!-- 没有课程提示 -->
                        <TextBlock Grid.Column="1"
                            HorizontalAlignment="Center" VerticalAlignment="Center"
                            Text="今天没有课程。" FontSize="16"
                            Margin="128 0">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ViewModel.CurrentClassPlan}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <!-- 课表 -->
                        <ListBox Grid.Column="1"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            ItemsSource="{Binding ViewModel.CurrentClassPlan.TimeLayout.Layouts}"
                            SelectionChanged="Selector_OnSelectionChanged"
                            IsHitTestVisible="False"
                            Margin="0 0 0 0"
                            x:Name="MainListBox"
                            IsTabStop="False">
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel IsItemsHost="True" Orientation="Horizontal" VerticalAlignment="Top" />
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                            <ListBox.ItemContainerStyle>
                                <Style BasedOn="{StaticResource MaterialDesignListBoxItem}" TargetType="{x:Type ListBoxItem}">
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="IsTabStop" Value="False" />
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <controls:LessonControl
                                        Index="{Binding Converter={StaticResource IndexConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}"
                                        Subjects="{Binding ViewModel.Profile.Subjects, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}, Mode=FindAncestor}}"
                                        CurrentClassPlan="{Binding ViewModel.CurrentClassPlan, RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}, Mode=FindAncestor}}"
                                        IsSelected="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
                                        <controls:LessonControl.Style>
                                            <Style TargetType="{x:Type controls:LessonControl}">
                                                <Setter Property="Visibility" Value="Visible" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding TimeType}" Value="1" />
                                                            <Condition
                                                                Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}"
                                                                Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </controls:LessonControl.Style>
                                    </controls:LessonControl>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>

                <!-- Overlay View -->
                <Grid x:Name="GridOverlay"
                    Background="{DynamicResource MaterialDesignPaper}"
                    Opacity="0">
                    <ProgressBar VerticalAlignment="Stretch"
                                 Maximum="1"
                                 Height="{Binding Height, ElementName=GridWrapper}"
                                 Value="{Binding ViewModel.OverlayRemainTimePercents, Mode=OneWay}"
                                 Foreground="{DynamicResource MaterialDesignBody}"
                                 Background="Transparent"
                                 BorderBrush="Transparent"
                                 Opacity="0.16"/>
                    <ContentPresenter Content="{Binding ViewModel.CurrentOverlayElement}" />
                </Grid>

                <!-- Mask -->
                <materialDesign:ColorZone x:Name="OverlayMask" Mode="PrimaryMid" VerticalAlignment="Stretch"
                    RenderTransformOrigin="0.5,0.5">
                    <materialDesign:ColorZone.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform />
                            <SkewTransform />
                            <RotateTransform />
                            <TranslateTransform Y="-50" />
                        </TransformGroup>
                    </materialDesign:ColorZone.RenderTransform>
                    <ContentPresenter x:Name="OverlayMaskContent" Content="{Binding ViewModel.CurrentMaskElement}" />
                </materialDesign:ColorZone>
            </Grid>

            <!--<hc:NotifyIcon ContextMenu="{StaticResource AppContextMenu}" Text="ClassIsland" Icon="/Assets/AppLogo.ico"/>-->
            <!--<tb:TaskbarIcon ContextMenu="{StaticResource AppConteGriddu}"
                        DataContext="{Binding}"
                        x:Name="MyTaskBarIcon"
                        IconSource="/Assets/AppLogo.ico"
                        MenuActivation="LeftOrRightClick"
                        ToolTipText="ClassIsland"
                        ToolTip="ClassIsland">
            </tb:TaskbarIcon>-->

            <!-- Content -->

        </Grid>

        <!-- Scale debug -->
        <!--<TextBlock Foreground="Cyan">
            <Run Text="{Binding ActualWidth, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}"/>
            <Run Text="{Binding ActualHeight, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}"/>
        </TextBlock>-->
    </Canvas>
</Window>
