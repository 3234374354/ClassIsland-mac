name: Publish release

on:
  push:

jobs:
  build_app:
    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: ClassIsland.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: ClassIsland/ClassIsland    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: ClassIsland/ClassIsland/ClassIsland.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    strategy:
      matrix: 
        trim_assets:
          - false
          - true
    concurrency: 
      group: Build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Get application version
        run: |
          $env:app_ver = (git describe --abbrev=0 --tags)
          echo $env:app_ver
      
      - name: List files
        run: ls
      
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      
      - name: Publish application
        env:
          trim_assets: ${{ trim_assets }}
        run: |
          ls
          pwsh -ep Bypass -c ./tools/publish.ps1 $env:trim_assets
          
      - name: Generate MD5
        run: |
          pwsh -ep Bypass -c .\tools\generate-md5.ps1 ./out
      - uses: actions/upload-artifact@v4
        with:
          name: out_app_assetsTrimmed_${{ trim_assets }}
          path: ./out/
          
  build_nupkgs:
    runs-on: windows-latest
    concurrency:
      group: Build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get application version
        run: |
          $env:app_ver = (git describe --abbrev=0 --tags)
          echo $env:app_ver

      - name: List files
        run: ls

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Publish application
        env:
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          ls
          pwsh -ep Bypass -c ./tools/publish_nupkgs.ps1 $env:is_release

      - name: Generate MD5
        run: |
          pwsh -ep Bypass -c .\tools\generate-md5.ps1 ./out
          
      - uses: actions/upload-artifact@v4
        with:
          name: out_nuget_pkgs
          path: ./out/
          
  publish_appcenter:
    runs-on: ubuntu-latest
    concurrency:
      group: Publish
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Upload to AppCenter
        env:
          APPCENTER_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
        run: |
          $env:app_ver = (git describe --abbrev=0 --tags)
          Write-Host "Uploading to AppCenter..." -ForegroundColor Cyan
          pwsh -ep Bypass -c .\tools\pre-appcenter-upload.ps1
          pwsh -ep Bypass -c .\tools\appcenter-upload.ps1 $env:APPCENTER_TOKEN $env:app_ver
  
  publish_github:
    runs-on: ubuntu-latest
    concurrency:
      group: Publish
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ./out/*.zip,./out/*.md5sum,./out/*.nupkg
          draft: true
          bodyFile: ./out/checksums.md
          token: ${{ secrets.GITHUB_TOKEN }}
